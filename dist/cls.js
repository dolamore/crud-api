import{createRequire as e}from"node:module";var n={n:e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},d:(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const t=e(import.meta.url)("cluster");var r=n.n(t);const o=e(import.meta.url)("os");var i=n.n(o);const s=e(import.meta.url)("node:crypto");var a=n.n(s);const d={randomUUID:a().randomUUID},f=new Uint8Array(256);let p=f.length;function l(){return p>f.length-16&&(a().randomFillSync(f),p=0),f.slice(p,p+=16)}const c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));const u=function(e,n,t){if(d.randomUUID&&!n&&!e)return d.randomUUID();const r=(e=e||{}).random||(e.rng||l)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){t=t||0;for(let e=0;e<16;++e)n[t+e]=r[e];return n}return function(e,n=0){return(c[e[n+0]]+c[e[n+1]]+c[e[n+2]]+c[e[n+3]]+"-"+c[e[n+4]]+c[e[n+5]]+"-"+c[e[n+6]]+c[e[n+7]]+"-"+c[e[n+8]]+c[e[n+9]]+"-"+c[e[n+10]]+c[e[n+11]]+c[e[n+12]]+c[e[n+13]]+c[e[n+14]]+c[e[n+15]]).toLowerCase()}(r)},m=[],g=e(import.meta.url)("url"),y=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i,h=function(e){return"string"==typeof e&&y.test(e)},S=(e,n)=>{const{pathname:t}=(0,g.parse)(e.url,!0),r=t?.split("/").filter(Boolean);try{if("GET"===e.method&&"/api/users"===t)n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(m));else if("GET"===e.method&&"api"===r?.[0]&&"users"===r?.[1]&&r?.[2]){const e=r[2];if(!h(e))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"Invalid userId"}));const t=m.find((n=>n.id===e));if(!t)return n.writeHead(404,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"User not found"}));n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(t))}else if("POST"===e.method&&"/api/users"===t){let t="";e.on("data",(e=>{t+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:r,hobbies:o}=JSON.parse(t);if(!e||"number"!=typeof r||!Array.isArray(o))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"Invalid request body"}));const i=((e,n,t)=>{const r={id:u(),username:e,age:n,hobbies:t};return m.push(r),r})(e,r,o);n.writeHead(201,{"Content-Type":"application/json"}),n.end(JSON.stringify(i))}catch(e){n.writeHead(400,{"Content-Type":"application/json"}),n.end(JSON.stringify({message:"Invalid JSON format"}))}}))}else if("PUT"===e.method&&"api"===r?.[0]&&"users"===r?.[1]&&r?.[2]){const t=r[2];if(!h(t))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"Invalid userId"}));let o="";e.on("data",(e=>{o+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:r,hobbies:i}=JSON.parse(o),s=m.findIndex((e=>e.id===t));if(-1===s)return n.writeHead(404,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"User not found"}));const a={id:t,username:e,age:r,hobbies:i};m[s]=a,n.writeHead(200,{"Content-Type":"application/json"}),n.end(JSON.stringify(a))}catch(e){n.writeHead(400,{"Content-Type":"application/json"}),n.end(JSON.stringify({message:"Invalid JSON format"}))}}))}else if("DELETE"===e.method&&"api"===r?.[0]&&"users"===r?.[1]&&r?.[2]){const e=r[2];if(!h(e))return n.writeHead(400,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"Invalid userId"}));const t=m.findIndex((n=>n.id===e));if(-1===t)return n.writeHead(404,{"Content-Type":"application/json"}),void n.end(JSON.stringify({message:"User not found"}));m.splice(t,1),n.writeHead(204),n.end()}else n.writeHead(404,{"Content-Type":"text/plain"}),n.end("404 Not Found")}catch(e){console.error("Server error:",e),n.writeHead(500,{"Content-Type":"text/plain"}),n.end("Internal Server Error: Something went wrong.")}},v=e(import.meta.url)("http"),w=i().cpus().length,O=process.env.PORT?parseInt(process.env.PORT):4e3;if(r().isPrimary){console.log(`Primary ${process.pid} is running`);for(let e=0;e<w-1;e++)r().fork();let e=0;(0,v.createServer)(((n,t)=>{const r=O+1+e%(w-1);e++;const o={hostname:"localhost",port:r,path:n.url,method:n.method,headers:n.headers},i=(0,v.request)(o,(e=>{t.writeHead(e.statusCode,e.headers),e.pipe(t,{end:!0})}));n.pipe(i,{end:!0})})).listen(O,(()=>{console.log(`Load balancer listening on port ${O}`)})),r().on("exit",(e=>{console.log(`Worker ${e.process.pid} died. Restarting...`),r().fork()}))}else(0,v.createServer)(S).listen(O+r().worker.id,(()=>{console.log(`Worker ${process.pid} is listening on port ${O+r().worker.id}`)}));