import{createRequire as e}from"node:module";var t={998:(e,t,n)=>{const o=n(896),r=n(928),s=n(857),i=n(982),a=n(56).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function p(e){console.log(`[dotenv@${a}][DEBUG] ${e}`)}function l(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function d(e,t){let n;try{n=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const o=n.password;if(!o){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=n.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,i=e.parsed[s];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:o}}function f(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const n of e.path)o.existsSync(n)&&(t=n.endsWith(".vault")?n:`${n}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=r.resolve(process.cwd(),".env.vault");return o.existsSync(t)?t:null}function u(e){return"~"===e[0]?r.join(s.homedir(),e.slice(1)):e}const g={configDotenv:function(e){const t=r.resolve(process.cwd(),".env");let n="utf8";const s=Boolean(e&&e.debug);e&&e.encoding?n=e.encoding:s&&p("No encoding is specified. UTF-8 is used by default");let i,a=[t];if(e&&e.path)if(Array.isArray(e.path)){a=[];for(const t of e.path)a.push(u(t))}else a=[u(e.path)];const c={};for(const t of a)try{const r=g.parse(o.readFileSync(t,{encoding:n}));g.populate(c,r,e)}catch(e){s&&p(`Failed to load ${t} ${e.message}`),i=e}let l=process.env;return e&&null!=e.processEnv&&(l=e.processEnv),g.populate(l,c,e),i?{parsed:c,error:i}:{parsed:c}},_configVault:function(e){console.log(`[dotenv@${a}][INFO] Loading env from encrypted .env.vault`);const t=g._parseVault(e);let n=process.env;return e&&null!=e.processEnv&&(n=e.processEnv),g.populate(n,t,e),{parsed:t}},_parseVault:function(e){const t=f(e),n=g.configDotenv({path:t});if(!n.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const o=l(e).split(","),r=o.length;let s;for(let e=0;e<r;e++)try{const t=d(n,o[e].trim());s=g.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=r)throw t}return g.parse(s)},config:function(e){if(0===l(e).length)return g.configDotenv(e);const t=f(e);return t?g._configVault(e):(n=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${a}][WARN] ${n}`),g.configDotenv(e));var n},decrypt:function(e,t){const n=Buffer.from(t.slice(-64),"hex");let o=Buffer.from(e,"base64");const r=o.subarray(0,12),s=o.subarray(-16);o=o.subarray(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",n,r);return e.setAuthTag(s),`${e.update(o)}${e.final()}`}catch(e){const t=e instanceof RangeError,n="Invalid key length"===e.message,o="Unsupported state or unable to authenticate data"===e.message;if(t||n){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(o){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let n,o=e.toString();for(o=o.replace(/\r\n?/gm,"\n");null!=(n=c.exec(o));){const e=n[1];let o=n[2]||"";o=o.trim();const r=o[0];o=o.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(o=o.replace(/\\n/g,"\n"),o=o.replace(/\\r/g,"\r")),t[e]=o}return t},populate:function(e,t,n={}){const o=Boolean(n&&n.debug),r=Boolean(n&&n.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(!0===r&&(e[n]=t[n]),o&&p(!0===r?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}};e.exports.configDotenv=g.configDotenv,e.exports._configVault=g._configVault,e.exports._parseVault=g._parseVault,e.exports.config=g.config,e.exports.decrypt=g.decrypt,e.exports.parse=g.parse,e.exports.populate=g.populate,e.exports=g},982:t=>{t.exports=e(import.meta.url)("crypto")},896:t=>{t.exports=e(import.meta.url)("fs")},857:t=>{t.exports=e(import.meta.url)("os")},928:t=>{t.exports=e(import.meta.url)("path")},56:e=>{e.exports=JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},n={};function o(e){var r=n[e];if(void 0!==r)return r.exports;var s=n[e]={exports:{}};return t[e](s,s.exports,o),s.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const r=e(import.meta.url)("http"),s=e(import.meta.url)("node:crypto");var i=o.n(s);const a={randomUUID:i().randomUUID},c=new Uint8Array(256);let p=c.length;function l(){return p>c.length-16&&(i().randomFillSync(c),p=0),c.slice(p,p+=16)}const d=[];for(let e=0;e<256;++e)d.push((e+256).toString(16).slice(1));const f=function(e,t,n){if(a.randomUUID&&!t&&!e)return a.randomUUID();const o=(e=e||{}).random||(e.rng||l)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=o[e];return t}return function(e,t=0){return(d[e[t+0]]+d[e[t+1]]+d[e[t+2]]+d[e[t+3]]+"-"+d[e[t+4]]+d[e[t+5]]+"-"+d[e[t+6]]+d[e[t+7]]+"-"+d[e[t+8]]+d[e[t+9]]+"-"+d[e[t+10]]+d[e[t+11]]+d[e[t+12]]+d[e[t+13]]+d[e[t+14]]+d[e[t+15]]).toLowerCase()}(o)},u=[],g=e(import.meta.url)("url"),v=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i,m=function(e){return"string"==typeof e&&v.test(e)};o(998).config();const y=process.env.PORT||4e3;(0,r.createServer)(((e,t)=>{((e,t)=>{const{pathname:n}=(0,g.parse)(e.url,!0),o=n?.split("/").filter(Boolean);try{if("GET"===e.method&&"/api/users"===n)t.writeHead(200,{"Content-Type":"application/json"}),t.end(JSON.stringify(u));else if("GET"===e.method&&"api"===o?.[0]&&"users"===o?.[1]&&o?.[2]){const e=o[2];if(!m(e))return t.writeHead(400,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"Invalid userId"}));const n=u.find((t=>t.id===e));if(!n)return t.writeHead(404,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"User not found"}));t.writeHead(200,{"Content-Type":"application/json"}),t.end(JSON.stringify(n))}else if("POST"===e.method&&"/api/users"===n){let n="";e.on("data",(e=>{n+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:o,hobbies:r}=JSON.parse(n);if(!e||"number"!=typeof o||!Array.isArray(r))return t.writeHead(400,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"Invalid request body"}));const s=((e,t,n)=>{const o={id:f(),username:e,age:t,hobbies:n};return u.push(o),o})(e,o,r);t.writeHead(201,{"Content-Type":"application/json"}),t.end(JSON.stringify(s))}catch(e){t.writeHead(400,{"Content-Type":"application/json"}),t.end(JSON.stringify({message:"Invalid JSON format"}))}}))}else if("PUT"===e.method&&"api"===o?.[0]&&"users"===o?.[1]&&o?.[2]){const n=o[2];if(!m(n))return t.writeHead(400,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"Invalid userId"}));let r="";e.on("data",(e=>{r+=e.toString()})),e.on("end",(()=>{try{const{username:e,age:o,hobbies:s}=JSON.parse(r),i=u.findIndex((e=>e.id===n));if(-1===i)return t.writeHead(404,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"User not found"}));const a={id:n,username:e,age:o,hobbies:s};u[i]=a,t.writeHead(200,{"Content-Type":"application/json"}),t.end(JSON.stringify(a))}catch(e){t.writeHead(400,{"Content-Type":"application/json"}),t.end(JSON.stringify({message:"Invalid JSON format"}))}}))}else if("DELETE"===e.method&&"api"===o?.[0]&&"users"===o?.[1]&&o?.[2]){const e=o[2];if(!m(e))return t.writeHead(400,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"Invalid userId"}));const n=u.findIndex((t=>t.id===e));if(-1===n)return t.writeHead(404,{"Content-Type":"application/json"}),void t.end(JSON.stringify({message:"User not found"}));u.splice(n,1),t.writeHead(204),t.end()}else t.writeHead(404,{"Content-Type":"text/plain"}),t.end("404 Not Found")}catch(e){console.error("Server error:",e),t.writeHead(500,{"Content-Type":"text/plain"}),t.end("Internal Server Error: Something went wrong.")}})(e,t)})).listen(y,(()=>{console.log(`Server is running on http://localhost:${y}`)}));